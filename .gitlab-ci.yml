stages:
  - test
  - deploy
  - build
  - deploy

test:
  image: node:10
  stage: test
  services:
    -  name: mongo:latest
       alias: mongodb # should be able to connect at this point
  variables:
    MONGO_URI: 'mongodb://mongodb:27017/koa-mongo-discord'
  before_script:
    - npm install
    # - chmod +x setup_env.sh && ./setup_env.sh
    - echo $MONGO_URI >> .env
    - echo $MONGO_URI
# https://medium.com/@chrishullman/js-testing-mocha-chai-and-istanbul-oh-my-5e68e0cd2e81
  script:
    - npm run test
  coverage:
    '/Statements.*?(\d+(?:\.\d+)?)%/'

coverage-js: 
  image: node:10
  stage: build
  before_script:
    - npm install
    # - chmod +x setup_env.sh && ./setup_env.sh
    - echo $MONGO_URI >> .env
    - echo $MONGO_URI
# https://medium.com/@chrishullman/js-testing-mocha-chai-and-istanbul-oh-my-5e68e0cd2e81
  script:
    - npm run build
    - npm run coverage
  artifacts:
    - coverage
    
  # Add artifacts here
# create coverage report
pages:
  image: node:10
  stage: deploy
  dependencies:
    - build
  before_script:
    - npm install
    - npm install -g typedoc
  script:
    - typedoc --excludeExternals --externalPattern "**/node_modules/**" --ignoreCompilerErrors --name "discord-bot" --mode "file" --out "public/" .
    - mv coverage public || true
  artifacts:
    paths:
      - public

staging:
  stage: deploy
  script:
    - apt-get update -qy
    - apt-get install -y ruby-dev
    - gem install dpl
    # Unignore .gitignore file
    - chmod +x setup_env.sh && ./setup_env.sh production
    - sed -i 's/.env/.dev/g' .gitignore
    - dpl --provider=heroku --app=dli-discord-assist --api-key=$HEROKU_API_KEY
  only:
    - master
    # change to tags once it is good